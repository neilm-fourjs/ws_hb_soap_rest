#-------------------------------------------------------------------------------
# File: cli_helloworld_ws_soap.4gl
# GENERATED BY fglwsdl 202405171609
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------


IMPORT FGL WSHelper
IMPORT com
IMPORT xml

#
#-------------------------------------------------------------------------------
# XML Type definitions 
#-------------------------------------------------------------------------------
#

#
# TYPE : tHBRequest_HBRequest
#
PUBLIC TYPE tHBRequest_HBRequest RECORD ATTRIBUTE(XMLSequence,XSTypeName="HBRequest_HBRequest",XSTypeNamespace="https://generodemos/g/ws/r/HelloWorld")
  name STRING 
END RECORD
#-------------------------------------------------------------------------------

#
# TYPE : tHBResponse_HBResponse
#
PUBLIC TYPE tHBResponse_HBResponse RECORD ATTRIBUTE(XMLSequence,XSTypeName="HBResponse_HBResponse",XSTypeNamespace="https://generodemos/g/ws/r/HelloWorld")
  status STRING 
END RECORD
#-------------------------------------------------------------------------------

#
# TYPE : tDBpingResponse_DBpingResponse
#
PUBLIC TYPE tDBpingResponse_DBpingResponse RECORD ATTRIBUTE(XMLSequence,XSTypeName="DBpingResponse_DBpingResponse",XSTypeNamespace="https://generodemos/g/ws/r/HelloWorld")
  status STRING 
END RECORD
#-------------------------------------------------------------------------------



#-------------------------------------------------------------------------------
# Service: HelloWorld
# Port:    HelloWorldPortType
# Server:  http://localhost:8080/HelloWorld
#-------------------------------------------------------------------------------
#
# Location of the SOAP endpoint.
# You can reassign this value at run-time.
#
PUBLIC DEFINE HelloWorld_HelloWorldPortTypeEndpoint WSHelper.tGlobalEndpointType


#-------------------------------------------------------------------------------

# VARIABLE : HBRequest
PUBLIC DEFINE HBRequest tHBRequest_HBRequest ATTRIBUTE(XMLName="HBRequest",XMLNamespace="https://generodemos/g/ws/r/HelloWorld")


#-------------------------------------------------------------------------------

# VARIABLE : HBResponse
PUBLIC DEFINE HBResponse tHBResponse_HBResponse ATTRIBUTE(XMLName="HBResponse",XMLNamespace="https://generodemos/g/ws/r/HelloWorld")


#-------------------------------------------------------------------------------

# VARIABLE : DBpingResponse
PUBLIC DEFINE DBpingResponse tDBpingResponse_DBpingResponse ATTRIBUTE(XMLName="DBpingResponse",XMLNamespace="https://generodemos/g/ws/r/HelloWorld")



# end of service types
#-------------------------------------------------------------------------------

# Start service implementation
#-------------------------------------------------------------------------------
# Service: HelloWorld
# Port:    HelloWorldPortType
# Server:  http://localhost:8080/HelloWorld
#-------------------------------------------------------------------------------

PRIVATE DEFINE HelloWorldHTTPReq     com.HttpRequest
PRIVATE DEFINE HelloWorldHTTPResp    com.HttpResponse

PRIVATE DEFINE DBpingHTTPReq     com.HttpRequest
PRIVATE DEFINE DBpingHTTPResp    com.HttpResponse

#-------------------------------------------------------------------------------

#
# Operation: HelloWorld
#

#
# FUNCTION: HelloWorld
#
FUNCTION HelloWorld(p_name)
  DEFINE	p_name		STRING
  DEFINE	soapStatus		INTEGER


  LET HBRequest.name = p_name

  LET soapStatus = HelloWorld_g()

  RETURN soapStatus, HBResponse.status
END FUNCTION

#
# FUNCTION: HelloWorld_g
#   RETURNING: soapStatus
#   INPUT:  HBRequest
#   OUTPUT:  HBResponse
#
FUNCTION HelloWorld_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE fault      BOOLEAN
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HttpRequest
  DEFINE response   com.HttpResponse
  DEFINE writer     xml.StaxWriter
  DEFINE reader     xml.StaxReader

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET fault = FALSE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri IS NULL THEN
    LET HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri = "http://localhost:8080/HelloWorld"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HttpRequest.Create(HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
    CALL WSHelper.WSHelper_SetRequestHeaders(request, HelloWorld_HelloWorldPortTypeEndpoint.Binding.Request.Headers)
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(HelloWorld_HelloWorldPortTypeEndpoint.Binding.Version)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeOut(HelloWorld_HelloWorldPortTypeEndpoint.Binding.ConnectionTimeout)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeOut(HelloWorld_HelloWorldPortTypeEndpoint.Binding.ReadWriteTimeout)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.CompressRequest IS NOT NULL THEN
      CALL request.setHeader("Content-Encoding",HelloWorld_HelloWorldPortTypeEndpoint.Binding.CompressRequest)
    END IF
    CALL request.setHeader("Accept-Encoding","gzip, deflate")
  CATCH
    LET wsstatus = status
    CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # Stax request
    #
    TRY
      LET writer = request.beginXmlRequest()
      CALL WSHelper.WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper.WSHelper_WriteStaxSOAP11StartBody(writer)
      #
      # STAX SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToStax(HBRequest,writer)
      CALL WSHelper.WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper.WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL request.endXmlRequest(writer)
    CATCH
      LET wsstatus = status
      CALL WSHelper.WSHelper_FillSOAP11WSError("Client",sqlca.sqlerrm)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie = WSHelper.WSHelper_ExtractServerCookie(setcookie,HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri)
      END IF

      #
      # RETRIEVE HTTP RESPONSE Headers
      #
      CALL WSHelper.WSHelper_SetResponseHeaders(response, HelloWorld_HelloWorldPortTypeEndpoint.Binding.Response.Headers)

      CASE
        WHEN response.getStatusCode()==200 OR response.getStatusCode()==500
          #
          # STAX SOAP RESPONSE OR FAULT
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          LET nb = 0
          IF WSHelper.WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper.WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper.WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # STAX SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper.WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper.WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper.WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          ELSE
            IF reader.isEmptyElement() THEN
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper.WSHelper_CheckStaxSOAP11StartFault(reader) THEN # Handle SOAP Fault
            LET fault = TRUE
            CALL reader.nextTag()
            IF NOT WSHelper.WSHelper_ReadStaxSOAP11FaultUntilDetail(reader) THEN
              EXIT CASE
            END IF
            IF WSHelper.WSHelper_CheckStaxSOAP11FaultDetail(reader) THEN
              #
              # STAX SOAP FAULT DESERIALIZE
              #
              CALL reader.nextSibling() # Skip SOAP detail
            END IF
            IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndFault(reader) THEN
              EXIT CASE
            END IF
          ELSE # Handle SOAP Response
            IF nb != 0 THEN # Check mandatory headers
              CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Headers are missing")
              EXIT CASE
            END IF
            IF NOT WSHelper.WSHelper_RetrieveStaxSOAP11Message(reader) THEN
              EXIT CASE
            END IF
            #
            # STAX SOAP RESPONSE DESERIALIZE
            #
            CALL xml.Serializer.StaxToVariable(reader,HBResponse)
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)
          IF NOT fault THEN
            LET wsstatus = 0
          END IF

        WHEN response.getStatusCode()==401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper.WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN response.getStatusCode()==407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper.WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper.WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper.WSHelper_FillSOAP11WSError("Server",sqlca.sqlerrm)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION HelloWorldRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.StaxWriter

  #
  # CHECK PREVIOUS CALL  
  #
  IF HelloWorldHTTPReq IS NOT NULL AND HelloWorldHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri IS NULL THEN
      LET HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri = "http://localhost:8080/HelloWorld"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET HelloWorldHTTPReq = com.HttpRequest.Create(HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri)
    CALL HelloWorldHTTPReq.setMethod("POST")
    CALL HelloWorldHTTPReq.setCharset("UTF-8")
    CALL HelloWorldHTTPReq.setHeader("SOAPAction","\"\"")
    CALL WSHelper.WSHelper_SetRequestHeaders(HelloWorldHTTPReq, HelloWorld_HelloWorldPortTypeEndpoint.Binding.Request.Headers)
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.Version IS NOT NULL THEN
      CALL HelloWorldHTTPReq.setVersion(HelloWorld_HelloWorldPortTypeEndpoint.Binding.Version)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL HelloWorldHTTPReq.setHeader("Cookie",HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL HelloWorldHTTPReq.setConnectionTimeOut(HelloWorld_HelloWorldPortTypeEndpoint.Binding.ConnectionTimeout)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL HelloWorldHTTPReq.setTimeOut(HelloWorld_HelloWorldPortTypeEndpoint.Binding.ReadWriteTimeout)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.CompressRequest IS NOT NULL THEN
      CALL HelloWorldHTTPReq.setHeader("Content-Encoding",HelloWorld_HelloWorldPortTypeEndpoint.Binding.CompressRequest)
    END IF
    CALL HelloWorldHTTPReq.setHeader("Accept-Encoding","gzip, deflate")
  CATCH
    LET wsstatus = status
    CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET HelloWorldHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # Stax request
    #
    TRY
      LET writer = HelloWorldHTTPReq.beginXmlRequest()
      CALL WSHelper.WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper.WSHelper_WriteStaxSOAP11StartBody(writer)
      #
      # STAX SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToStax(HBRequest,writer)
      CALL WSHelper.WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper.WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL HelloWorldHTTPReq.endXmlRequest(writer)
    CATCH
      LET wsstatus = status
      CALL WSHelper.WSHelper_FillSOAP11WSError("Client",sqlca.sqlerrm)
      LET HelloWorldHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET HelloWorldHTTPResp = HelloWorldHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = status
    CALL WSHelper.WSHelper_FillSOAP11WSError("Server",sqlca.sqlerrm)
    LET HelloWorldHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION HelloWorldResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE fault           BOOLEAN
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.StaxReader

  LET fault = FALSE
  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF HelloWorldHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper.WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF HelloWorldHTTPResp IS NULL THEN
      # Still no response, try again
      LET HelloWorldHTTPResp = HelloWorldHTTPReq.getAsyncResponse()
    END IF

    IF HelloWorldHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = HelloWorldHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie = WSHelper.WSHelper_ExtractServerCookie(setcookie,HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri)
      END IF

      #
      # RETRIEVE HTTP RESPONSE Headers
      #
      CALL WSHelper.WSHelper_SetResponseHeaders(HelloWorldHTTPResp, HelloWorld_HelloWorldPortTypeEndpoint.Binding.Response.Headers)
      CASE
        WHEN HelloWorldHTTPResp.getStatusCode()==200 OR HelloWorldHTTPResp.getStatusCode()==500
          #
          # STAX SOAP RESPONSE OR FAULT
          #
          LET reader = HelloWorldHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          LET nb = 0
          IF WSHelper.WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper.WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper.WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # STAX SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper.WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper.WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper.WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          ELSE
            IF reader.isEmptyElement() THEN
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper.WSHelper_CheckStaxSOAP11StartFault(reader) THEN # Handle SOAP Fault
            LET fault = TRUE
            CALL reader.nextTag()
            IF NOT WSHelper.WSHelper_ReadStaxSOAP11FaultUntilDetail(reader) THEN
              EXIT CASE
            END IF
            IF WSHelper.WSHelper_CheckStaxSOAP11FaultDetail(reader) THEN
              #
              # STAX SOAP FAULT DESERIALIZE
              #
              CALL reader.nextSibling() # Skip SOAP detail
            END IF
            IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndFault(reader) THEN
              EXIT CASE
            END IF
          ELSE # Handle SOAP Response
            IF nb != 0 THEN # Check mandatory headers
              CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Headers are missing")
              EXIT CASE
            END IF
            IF NOT WSHelper.WSHelper_RetrieveStaxSOAP11Message(reader) THEN
              EXIT CASE
            END IF
            #
            # STAX SOAP RESPONSE DESERIALIZE
            #
            CALL xml.Serializer.StaxToVariable(reader,HBResponse)
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL HelloWorldHTTPResp.endXmlResponse(reader)
          IF NOT fault THEN
            LET wsstatus = 0
          END IF

        OTHERWISE
          CALL WSHelper.WSHelper_FillSOAP11WSError("Server","HTTP Error "||HelloWorldHTTPResp.getStatusCode()||" ("||HelloWorldHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper.WSHelper_FillSOAP11WSError("Server",sqlca.sqlerrm)
    END TRY

  #
  # RESET VARIABLES
  #
  LET HelloWorldHTTPReq = NULL
  LET HelloWorldHTTPResp = NULL
  RETURN wsstatus

END FUNCTION



#
# Operation: DBping
#

#
# FUNCTION: DBping
#
FUNCTION DBping()
  DEFINE	soapStatus		INTEGER


  LET soapStatus = DBping_g()

  RETURN soapStatus, DBpingResponse.status
END FUNCTION

#
# FUNCTION: DBping_g
#   RETURNING: soapStatus
#   INPUT: NONE
#   OUTPUT:  DBpingResponse
#
FUNCTION DBping_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE fault      BOOLEAN
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HttpRequest
  DEFINE response   com.HttpResponse
  DEFINE writer     xml.StaxWriter
  DEFINE reader     xml.StaxReader

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET fault = FALSE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri IS NULL THEN
    LET HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri = "http://localhost:8080/HelloWorld"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HttpRequest.Create(HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
    CALL WSHelper.WSHelper_SetRequestHeaders(request, HelloWorld_HelloWorldPortTypeEndpoint.Binding.Request.Headers)
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(HelloWorld_HelloWorldPortTypeEndpoint.Binding.Version)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeOut(HelloWorld_HelloWorldPortTypeEndpoint.Binding.ConnectionTimeout)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeOut(HelloWorld_HelloWorldPortTypeEndpoint.Binding.ReadWriteTimeout)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.CompressRequest IS NOT NULL THEN
      CALL request.setHeader("Content-Encoding",HelloWorld_HelloWorldPortTypeEndpoint.Binding.CompressRequest)
    END IF
    CALL request.setHeader("Accept-Encoding","gzip, deflate")
  CATCH
    LET wsstatus = status
    CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # Stax request
    #
    TRY
      LET writer = request.beginXmlRequest()
      CALL WSHelper.WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper.WSHelper_WriteStaxSOAP11StartBody(writer)
      #
      # STAX SOAP REQUEST SERIALIZE
      #
      CALL writer.setPrefix("fjs","https://generodemos/g/ws/r/HelloWorld")
      CALL writer.emptyElementNS("DBpingRequest","https://generodemos/g/ws/r/HelloWorld")
      CALL WSHelper.WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper.WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL request.endXmlRequest(writer)
    CATCH
      LET wsstatus = status
      CALL WSHelper.WSHelper_FillSOAP11WSError("Client",sqlca.sqlerrm)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie = WSHelper.WSHelper_ExtractServerCookie(setcookie,HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri)
      END IF

      #
      # RETRIEVE HTTP RESPONSE Headers
      #
      CALL WSHelper.WSHelper_SetResponseHeaders(response, HelloWorld_HelloWorldPortTypeEndpoint.Binding.Response.Headers)

      CASE
        WHEN response.getStatusCode()==200 OR response.getStatusCode()==500
          #
          # STAX SOAP RESPONSE OR FAULT
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          LET nb = 0
          IF WSHelper.WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper.WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper.WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # STAX SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper.WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper.WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper.WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          ELSE
            IF reader.isEmptyElement() THEN
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper.WSHelper_CheckStaxSOAP11StartFault(reader) THEN # Handle SOAP Fault
            LET fault = TRUE
            CALL reader.nextTag()
            IF NOT WSHelper.WSHelper_ReadStaxSOAP11FaultUntilDetail(reader) THEN
              EXIT CASE
            END IF
            IF WSHelper.WSHelper_CheckStaxSOAP11FaultDetail(reader) THEN
              #
              # STAX SOAP FAULT DESERIALIZE
              #
              CALL reader.nextSibling() # Skip SOAP detail
            END IF
            IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndFault(reader) THEN
              EXIT CASE
            END IF
          ELSE # Handle SOAP Response
            IF nb != 0 THEN # Check mandatory headers
              CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Headers are missing")
              EXIT CASE
            END IF
            IF NOT WSHelper.WSHelper_RetrieveStaxSOAP11Message(reader) THEN
              EXIT CASE
            END IF
            #
            # STAX SOAP RESPONSE DESERIALIZE
            #
            CALL xml.Serializer.StaxToVariable(reader,DBpingResponse)
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)
          IF NOT fault THEN
            LET wsstatus = 0
          END IF

        WHEN response.getStatusCode()==401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper.WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN response.getStatusCode()==407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper.WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper.WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper.WSHelper_FillSOAP11WSError("Server",sqlca.sqlerrm)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION DBpingRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.StaxWriter

  #
  # CHECK PREVIOUS CALL  
  #
  IF DBpingHTTPReq IS NOT NULL AND DBpingHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri IS NULL THEN
      LET HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri = "http://localhost:8080/HelloWorld"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET DBpingHTTPReq = com.HttpRequest.Create(HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri)
    CALL DBpingHTTPReq.setMethod("POST")
    CALL DBpingHTTPReq.setCharset("UTF-8")
    CALL DBpingHTTPReq.setHeader("SOAPAction","\"\"")
    CALL WSHelper.WSHelper_SetRequestHeaders(DBpingHTTPReq, HelloWorld_HelloWorldPortTypeEndpoint.Binding.Request.Headers)
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.Version IS NOT NULL THEN
      CALL DBpingHTTPReq.setVersion(HelloWorld_HelloWorldPortTypeEndpoint.Binding.Version)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL DBpingHTTPReq.setHeader("Cookie",HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL DBpingHTTPReq.setConnectionTimeOut(HelloWorld_HelloWorldPortTypeEndpoint.Binding.ConnectionTimeout)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL DBpingHTTPReq.setTimeOut(HelloWorld_HelloWorldPortTypeEndpoint.Binding.ReadWriteTimeout)
    END IF
    IF HelloWorld_HelloWorldPortTypeEndpoint.Binding.CompressRequest IS NOT NULL THEN
      CALL DBpingHTTPReq.setHeader("Content-Encoding",HelloWorld_HelloWorldPortTypeEndpoint.Binding.CompressRequest)
    END IF
    CALL DBpingHTTPReq.setHeader("Accept-Encoding","gzip, deflate")
  CATCH
    LET wsstatus = status
    CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET DBpingHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # Stax request
    #
    TRY
      LET writer = DBpingHTTPReq.beginXmlRequest()
      CALL WSHelper.WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper.WSHelper_WriteStaxSOAP11StartBody(writer)
      #
      # STAX SOAP REQUEST SERIALIZE
      #
      CALL writer.setPrefix("fjs","https://generodemos/g/ws/r/HelloWorld")
      CALL writer.emptyElementNS("DBpingRequest","https://generodemos/g/ws/r/HelloWorld")
      CALL WSHelper.WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper.WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL DBpingHTTPReq.endXmlRequest(writer)
    CATCH
      LET wsstatus = status
      CALL WSHelper.WSHelper_FillSOAP11WSError("Client",sqlca.sqlerrm)
      LET DBpingHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET DBpingHTTPResp = DBpingHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = status
    CALL WSHelper.WSHelper_FillSOAP11WSError("Server",sqlca.sqlerrm)
    LET DBpingHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION DBpingResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE fault           BOOLEAN
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.StaxReader

  LET fault = FALSE
  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF DBpingHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper.WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF DBpingHTTPResp IS NULL THEN
      # Still no response, try again
      LET DBpingHTTPResp = DBpingHTTPReq.getAsyncResponse()
    END IF

    IF DBpingHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = DBpingHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET HelloWorld_HelloWorldPortTypeEndpoint.Binding.Cookie = WSHelper.WSHelper_ExtractServerCookie(setcookie,HelloWorld_HelloWorldPortTypeEndpoint.Address.Uri)
      END IF

      #
      # RETRIEVE HTTP RESPONSE Headers
      #
      CALL WSHelper.WSHelper_SetResponseHeaders(DBpingHTTPResp, HelloWorld_HelloWorldPortTypeEndpoint.Binding.Response.Headers)
      CASE
        WHEN DBpingHTTPResp.getStatusCode()==200 OR DBpingHTTPResp.getStatusCode()==500
          #
          # STAX SOAP RESPONSE OR FAULT
          #
          LET reader = DBpingHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          LET nb = 0
          IF WSHelper.WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper.WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper.WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # STAX SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper.WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper.WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper.WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          ELSE
            IF reader.isEmptyElement() THEN
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper.WSHelper_CheckStaxSOAP11StartFault(reader) THEN # Handle SOAP Fault
            LET fault = TRUE
            CALL reader.nextTag()
            IF NOT WSHelper.WSHelper_ReadStaxSOAP11FaultUntilDetail(reader) THEN
              EXIT CASE
            END IF
            IF WSHelper.WSHelper_CheckStaxSOAP11FaultDetail(reader) THEN
              #
              # STAX SOAP FAULT DESERIALIZE
              #
              CALL reader.nextSibling() # Skip SOAP detail
            END IF
            IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndFault(reader) THEN
              EXIT CASE
            END IF
          ELSE # Handle SOAP Response
            IF nb != 0 THEN # Check mandatory headers
              CALL WSHelper.WSHelper_FillSOAP11WSError("Client","Headers are missing")
              EXIT CASE
            END IF
            IF NOT WSHelper.WSHelper_RetrieveStaxSOAP11Message(reader) THEN
              EXIT CASE
            END IF
            #
            # STAX SOAP RESPONSE DESERIALIZE
            #
            CALL xml.Serializer.StaxToVariable(reader,DBpingResponse)
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper.WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL DBpingHTTPResp.endXmlResponse(reader)
          IF NOT fault THEN
            LET wsstatus = 0
          END IF

        OTHERWISE
          CALL WSHelper.WSHelper_FillSOAP11WSError("Server","HTTP Error "||DBpingHTTPResp.getStatusCode()||" ("||DBpingHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper.WSHelper_FillSOAP11WSError("Server",sqlca.sqlerrm)
    END TRY

  #
  # RESET VARIABLES
  #
  LET DBpingHTTPReq = NULL
  LET DBpingHTTPResp = NULL
  RETURN wsstatus

END FUNCTION


